<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Eclipse開發JAVA-環境建置</title>
      <link href="2021/04/14/Eclipse%E9%96%8B%E7%99%BCJAVA-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/"/>
      <url>2021/04/14/Eclipse%E9%96%8B%E7%99%BCJAVA-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>最近被問到要不要把dotNet改版成java，所以先來建置一下開發環境看看java是怎麼開發Web，順便記錄一下</p><h2 id="Eclipse-下載"><a href="#Eclipse-下載" class="headerlink" title="Eclipse 下載"></a>Eclipse 下載</h2><p><img src="https://i.imgur.com/oJi1VNM.png" alt="Image"></p><blockquote><ul><li>如果在不正常停止debug時，會遇到再次啟動時埠已被佔用而啟動失敗時，首先要先切換為debug視窗(在右上角)<br><img src="https://i.imgur.com/NkhTseY.png" alt="Image"></li><li>切換後在左邊窗列會有兩個Tab，將Tab切換為debug<br><img src="https://i.imgur.com/IuK4YPw.png" alt="Image"></li><li>如果發現有尚未停止的執行緒，先選擇要停止的程序再選擇停止<br><img src="https://i.imgur.com/IyKgv60.png" alt="Image"></li></ul></blockquote><h2 id="使用start-spring-io產生初始專案"><a href="#使用start-spring-io產生初始專案" class="headerlink" title="使用start.spring.io產生初始專案"></a>使用start.spring.io產生初始專案</h2><ol><li><p>到<a href="https://start.spring.io/">Start Spring</a>，選擇要使用執行的環境與要使用的套件，會直接產生專案範本，之後就可以匯入開發工具中。<br><img src="https://i.imgur.com/Q3nqGdh.png" alt="Image"><br><img src="https://i.imgur.com/ylumutx.png" alt="Image"><br><img src="https://i.imgur.com/59bQA1u.png" alt="Image"><br><img src="https://i.imgur.com/w3crt5U.png" alt="Image"></p></li><li><p>匯入完成後，可以先在DemoApplication.java定義預設的回應方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;Controllor&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Index</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果Controller在另外的package時，必須指定scan的package<br><code>@SpringBootApplication(scanBasePackages = &quot;指定的package&quot;)</code><br>詳細可以參考<a href="https://blog.csdn.net/u010502101/article/details/78817581">SpringBootApplication用法</a></p></blockquote><h2 id="一個Controller範例"><a href="#一個Controller範例" class="headerlink" title="一個Controller範例"></a>一個Controller範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/SayHi&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">SayHi</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> UserModel user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(user==<span class="keyword">null</span>) user = <span class="keyword">new</span> UserModel();</span><br><span class="line"><span class="keyword">if</span>(user.name==<span class="keyword">null</span> || user.name ==<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">user.name = <span class="string">&quot;Demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="application-properties-設定"><a href="#application-properties-設定" class="headerlink" title="application.properties 設定"></a>application.properties 設定</h2><p>當有選擇資料庫套件(ex:mybatis) 執行時，如果出現「<br>Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.」，時必需要在application.properties參數設定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用資料庫連線方式</span></span><br><span class="line">spring.datasource.url=jdbc:sqlserver:<span class="comment">//LAPTOP-VL2GOT2H\\SQLEXPRESS;databaseName=Northwind</span></span><br><span class="line">spring.datasource.username=&#123;username&#125;</span><br><span class="line">spring.datasource.password=&#123;password&#125;</span><br><span class="line">spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line"></span><br><span class="line"><span class="comment">//改變啟動時後的連結埠</span></span><br><span class="line">server.port=<span class="number">1234</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/J7oZR7s.png" alt="Image"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://springframework.guru/configuring-spring-boot-for-microsoft-sql-server/">MSSQL 設定參考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode開發JAVA-環境建置</title>
      <link href="2021/04/14/VSCode%E9%96%8B%E7%99%BCJAVA-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/"/>
      <url>2021/04/14/VSCode%E9%96%8B%E7%99%BCJAVA-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Maven類似NuGet，作套件管理，下載<a href="https://maven.apache.org/download.cgi?Preferred=https://downloads.apache.org/">Maven Download</a>，之後解完壓縮後，在「環境變數」PATH設定此路徑。</p><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>因為己經使用VSCode安裝版，也裝了不少套件，為了本次的案子，想要使用VSCode來開發，所以使用免安裝的方式，來建置JAVA開發環境。<br><img src="https://i.imgur.com/F0vRh2D.png" alt="Image"></p><h2 id="VSCode-套件"><a href="#VSCode-套件" class="headerlink" title="VSCode 套件"></a>VSCode 套件</h2><h3 id="Java-Extension-Pack"><a href="#Java-Extension-Pack" class="headerlink" title="Java Extension Pack"></a>Java Extension Pack</h3><p>這是Microsoft所包裝的Pack，進面包含：</p><ul><li>Visual Studio IntelliCode</li><li>Language Support for Java(TM) by Red Hat</li><li>Debugger for Java</li><li>Maven for Java</li><li>Java Test Runner</li><li>Project Manager for Java<br><img src="https://i.imgur.com/zbGE151.png" alt="Image"></li></ul><h3 id="Spring-Boot-Extension-Pack"><a href="#Spring-Boot-Extension-Pack" class="headerlink" title="Spring Boot Extension Pack"></a>Spring Boot Extension Pack</h3><p>這是開發SpringFormwork使用的想關套件，進面包含：</p><ul><li>Spring Boot Tools</li><li>Spring Initializr Java Support</li><li>Spring Boot Dashboard</li><li>Cloudfoundry Manifest YML Support</li><li>Concourse CI Pipeline Editor<br><img src="https://i.imgur.com/nhL3gIO.png" alt="Image"></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cordova開發App-開發環境</title>
      <link href="2021/04/12/%E4%BD%BF%E7%94%A8Cordova%E9%96%8B%E7%99%BCApp-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/"/>
      <url>2021/04/12/%E4%BD%BF%E7%94%A8Cordova%E9%96%8B%E7%99%BCApp-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="開發環境建置"><a href="#開發環境建置" class="headerlink" title="開發環境建置"></a>開發環境建置</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p><a href="https://nodejs.org/en/download/">Node Download &amp;&amp; Install</a></p><h3 id="JDK-1-8-XX"><a href="#JDK-1-8-XX" class="headerlink" title="JDK 1.8.XX"></a>JDK 1.8.XX</h3><p><a href="https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html">JDK Downlo<br>ad &amp;&amp; Install</a></p><span id="more"></span><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p><a href="https://developer.android.com/studio">Android Download &amp;&amp; Install</a></p><p>在「Tools/SDK Manager/System Setting/Android SDK」中的Android SDK Location裡面必需設定在PATH的「Android_SDK_Home」與「Android_Home」中<br><img src="https://i.imgur.com/eWNE5p9.png" alt="Image"><br><img src="https://i.imgur.com/6F12kHi.png" alt="Image"></p><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>依照官網安裝<a href="https://gradle.org/install/">Gradle Install</a>，假設在Windows下安裝直接下載解壓後，要在環境變數PATH中設定路徑。</p><blockquote><p>如果沒有安裝會出現Error:<br>Checking Java JDK and Android SDK versions<br>ANDROID_SDK_ROOT=undefined (recommended setting)<br>ANDROID_HOME=C:\Android\android-sdk (DEPRECATED)<br>Using Android SDK: C:\Android\android-sdk<br>Could not find an installed version of Gradle either in Android Studio,<br>or on your system to install the gradle wrapper. Please include gradle<br>in your path, or install Android Studio</p></blockquote><h3 id="關閉-HyperV"><a href="#關閉-HyperV" class="headerlink" title="關閉 HyperV"></a>關閉 HyperV</h3><p>如果有安裝HyperV，必需要關閉否則模擬器會無法啟動<br><code>bcdedit /set hypervisorlaunchtype off</code>   </p><h3 id="cordova-install-amp-amp-hello-world-demo"><a href="#cordova-install-amp-amp-hello-world-demo" class="headerlink" title="cordova install &amp;&amp; hello world demo"></a>cordova install &amp;&amp; hello world demo</h3><h4 id="npm-install-g-cordova"><a href="#npm-install-g-cordova" class="headerlink" title="npm install -g cordova"></a><code>npm install -g cordova</code></h4><h4 id="cordova-create-hello-com-example-hello-HelloWorld"><a href="#cordova-create-hello-com-example-hello-HelloWorld" class="headerlink" title="cordova create hello com.example.hello HelloWorld"></a><code>cordova create hello com.example.hello HelloWorld</code></h4><h4 id="cd-hello"><a href="#cd-hello" class="headerlink" title="cd hello"></a><code>cd hello</code></h4><h4 id="cordova-platform-add-android-增加建置平台"><a href="#cordova-platform-add-android-增加建置平台" class="headerlink" title="cordova platform add android  增加建置平台"></a><code>cordova platform add android </code> 增加建置平台</h4><h4 id="cordova-build-全部平台一起編譯"><a href="#cordova-build-全部平台一起編譯" class="headerlink" title="cordova build   全部平台一起編譯"></a><code>cordova build</code>   全部平台一起編譯</h4><h4 id="cordova-build-android-指定Android平台編譯"><a href="#cordova-build-android-指定Android平台編譯" class="headerlink" title="cordova build android 指定Android平台編譯"></a><code>cordova build android</code> 指定Android平台編譯</h4><h4 id="cordova-emulate-android-編譯-amp-啟動已編譯好的apk"><a href="#cordova-emulate-android-編譯-amp-啟動已編譯好的apk" class="headerlink" title="cordova emulate android 編譯&amp;啟動已編譯好的apk"></a><code>cordova emulate android</code> 編譯&amp;啟動已編譯好的apk</h4><p><img src="https://i.imgur.com/YEVdNao.gif" alt="image"></p><h2 id="主要開發目錄-www"><a href="#主要開發目錄-www" class="headerlink" title="主要開發目錄(www)"></a>主要開發目錄(www)</h2><p>只要在www放入網站就可以編譯成App<br><img src="https://i.imgur.com/4ODXBXW.png" alt="Image"></p><h2 id="使用cordova-emulate-android-直接更新畫面"><a href="#使用cordova-emulate-android-直接更新畫面" class="headerlink" title="使用cordova emulate android 直接更新畫面"></a>使用<code>cordova emulate android</code> 直接更新畫面</h2><p><img src="https://i.imgur.com/yFOBKLC.gif"></p><h2 id="使用Chrome-Debug"><a href="#使用Chrome-Debug" class="headerlink" title="使用Chrome Debug"></a>使用Chrome Debug</h2><ul><li><p>在Chrome上</p><ul><li><code>chrome://inspect/#devices</code><br><img src="https://i.imgur.com/Td3c3nh.png" alt="Image"></li></ul></li><li><p>在編譯時的</p><ul><li><code>cordova build --debug android</code><br><img src="https://i.imgur.com/JgyIDc1.png" alt="Image"></li></ul></li></ul><h2 id="移植app要調整的程式碼"><a href="#移植app要調整的程式碼" class="headerlink" title="移植app要調整的程式碼"></a>移植app要調整的程式碼</h2><h3 id="document-alert"><a href="#document-alert" class="headerlink" title="document.alert"></a>document.alert</h3><p>在APP中沒有Window.alert，所以必需改寫為 <code>window.alert = navigator.notification.alert;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(navigator.notification)&#123;</span><br><span class="line">    <span class="built_in">window</span>.alert = navigator.notification.alert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果完整路徑使用-window-location-href-會跳轉到預設的-Browser"><a href="#如果完整路徑使用-window-location-href-會跳轉到預設的-Browser" class="headerlink" title="如果完整路徑使用 window.location.href 會跳轉到預設的 Browser"></a>如果完整路徑使用 <code>window.location.href</code> 會跳轉到預設的 Browser</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Cookie實作Login-使用Authentication</title>
      <link href="2021/04/09/%E4%BD%BF%E7%94%A8Cookie%E5%AF%A6%E4%BD%9CLogin-%E4%BD%BF%E7%94%A8Authentication/"/>
      <url>2021/04/09/%E4%BD%BF%E7%94%A8Cookie%E5%AF%A6%E4%BD%9CLogin-%E4%BD%BF%E7%94%A8Authentication/</url>
      
        <content type="html"><![CDATA[<p>雖然可以完全可以自行完成Login的功能，但在Asp.net Core中有提供Authentication的Service與Middleware，可以更完整及快速開發。</p><span id="more"></span><h2 id="Startup-cs-中的設定"><a href="#Startup-cs-中的設定" class="headerlink" title="Startup.cs 中的設定"></a>Startup.cs 中的設定</h2><h3 id="Service的設定"><a href="#Service的設定" class="headerlink" title="Service的設定"></a>Service的設定</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line"></span><br><span class="line">    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme); <span class="comment">//使用預設的Scheme</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Middleware的設定"><a href="#Middleware的設定" class="headerlink" title="Middleware的設定"></a>Middleware的設定</h3>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Without Identity, Login,ASP.NETCore,Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cookie實作Login-簡易登入</title>
      <link href="2021/04/06/%E4%BD%BF%E7%94%A8Cookie%E5%AF%A6%E4%BD%9CLogin-%E7%B0%A1%E6%98%93%E7%99%BB%E5%85%A5/"/>
      <url>2021/04/06/%E4%BD%BF%E7%94%A8Cookie%E5%AF%A6%E4%BD%9CLogin-%E7%B0%A1%E6%98%93%E7%99%BB%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="實作登入與登出"><a href="#實作登入與登出" class="headerlink" title="實作登入與登出"></a>實作登入與登出</h2><p>實作流程大致上與<a href="/2021/03/25/%E4%BD%BF%E7%94%A8Session%E5%AF%A6%E4%BD%9CLogin/" title="使用Session實作Login">使用Session實作Login</a>的流程相同，只有儲存的方式改變為使用Cookie，剩下Controller在處理登入與登出的部份，先暫時空者。</p><span id="more"></span><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Login</span>(<span class="params">LoginModel data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.Badge == <span class="string">&quot;Justin&quot;</span> &amp;&amp; data.CipherCode == <span class="string">&quot;1111111111&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//to do append cookie</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(HomeController.Index), <span class="string">&quot;Home&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> View(<span class="keyword">nameof</span>(HomeController.Index), data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Logout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//to do clean cookie</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p>登入後寫入與登出後刪除Cookie<br><img src="https://i.imgur.com/tPcdA7K.png" alt="Image"></p><ol><li>雖然這樣可以辦視出是否有登入，但無法辨斷出登入者是誰，所以調整為寫入登入都是的帳號</li></ol> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpContext.Response.Cookies.Append(<span class="string">&quot;auth_token&quot;</span>, data.Badge, ......</span><br></pre></td></tr></table></figure><ol><li>雖然已經可以透過Cookie辦視出是誰登入，但這樣外漏在外面，不太好所以將資料編個碼</li></ol> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Login</span>(<span class="params">LoginModel data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (data.Badge == <span class="string">&quot;Justin&quot;</span> &amp;&amp; data.CipherCode == <span class="string">&quot;1111111111&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">var</span> encode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> aes = <span class="keyword">new</span> AesCryptoServiceProvider();</span><br><span class="line">        SHA256CryptoServiceProvider sha256 = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line">        MD5CryptoServiceProvider md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] key = sha256.ComputeHash(Encoding.ASCII.GetBytes(<span class="string">&quot;12345678&quot;</span>));</span><br><span class="line">        <span class="built_in">byte</span>[] iv = md5.ComputeHash(Encoding.ASCII.GetBytes(<span class="string">&quot;12345678&quot;</span>));</span><br><span class="line">        aes.Key = key;</span><br><span class="line">        aes.IV = iv;</span><br><span class="line">        <span class="keyword">var</span> dataArray = Encoding.UTF8.GetBytes(data.Badge);</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cs = <span class="keyword">new</span> CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))</span><br><span class="line">        &#123;</span><br><span class="line">            cs.Write(dataArray, <span class="number">0</span>, dataArray.Length);</span><br><span class="line">            cs.FlushFinalBlock();</span><br><span class="line">            encode = Convert.ToBase64String(dataArray.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HttpContext.Response.Cookies.Append(<span class="string">&quot;auth_token&quot;</span>,encode,</span><br><span class="line">            <span class="keyword">new</span> CookieOptions</span><br><span class="line">            &#123;</span><br><span class="line">                HttpOnly = <span class="literal">true</span>, <span class="comment">//不可以被前端修改</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(HomeController.Index), <span class="string">&quot;Home&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> View(<span class="keyword">nameof</span>(HomeController.Index), data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 1 最後將加解密程序抽離為擴充<code>CryptoStringExtension</code></p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CryptoStringExtension.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CryptoStringExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Key &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Iv &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToAesEncode</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> original</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SHA256CryptoServiceProvider sha256 = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line">        MD5CryptoServiceProvider md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] key = sha256.ComputeHash(Encoding.ASCII.GetBytes(Key));</span><br><span class="line">        <span class="built_in">byte</span>[] iv = md5.ComputeHash(Encoding.ASCII.GetBytes(Iv));</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ToAesEncode(original, key, iv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToAesEncode</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> original,<span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] iv</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> encode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> aes = <span class="keyword">new</span> AesCryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">        aes.Key = key;</span><br><span class="line">        aes.IV = iv;</span><br><span class="line">        <span class="keyword">var</span> dataArray = Encoding.UTF8.GetBytes(original);</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cs = <span class="keyword">new</span> CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))</span><br><span class="line">        &#123;</span><br><span class="line">            cs.Write(dataArray, <span class="number">0</span>, dataArray.Length);</span><br><span class="line">            cs.FlushFinalBlock();</span><br><span class="line">            encode = Convert.ToBase64String(ms.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToDecode</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> original</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SHA256CryptoServiceProvider sha256 = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line">        MD5CryptoServiceProvider md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] key = sha256.ComputeHash(Encoding.ASCII.GetBytes(Key));</span><br><span class="line">        <span class="built_in">byte</span>[] iv = md5.ComputeHash(Encoding.ASCII.GetBytes(Iv));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ToDecode(original, key, iv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ToDecode</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> original, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] iv</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> encode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> aes = <span class="keyword">new</span> AesCryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">            aes.Key = key;</span><br><span class="line">            aes.IV = iv;</span><br><span class="line">            <span class="keyword">var</span> dataArray = Convert.FromBase64String(original);</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cs = <span class="keyword">new</span> CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                cs.Write(dataArray, <span class="number">0</span>, dataArray.Length);</span><br><span class="line">                cs.FlushFinalBlock();</span><br><span class="line">                encode = Encoding.UTF8.GetString(ms.ToArray());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            encode = ex.Message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> encode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在Account中的Login加密的部份改寫為</li></ol> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="keyword">var</span> encode = data.Badge.ToAesEncode();</span><br></pre></td></tr></table></figure><ol><li>最後為沒簡單測試解密，我們在HomeController/Privacy 上加上解密的程序</li></ol> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">value</span> = HttpContext.Request.Cookies.SingleOrDefault(x =&gt; x.Key == <span class="string">&quot;auth_token&quot;</span>).Value;</span><br><span class="line"><span class="keyword">var</span> decode = <span class="keyword">value</span>.ToDecode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (decode != <span class="string">&quot;Justin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(AccountController.Index));</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://i.imgur.com/CXYyPij.gif" alt="image"></p><h2 id="從Middleware判斷是否已登入"><a href="#從Middleware判斷是否已登入" class="headerlink" title="從Middleware判斷是否已登入"></a>從Middleware判斷是否已登入</h2><p>雖然是完成一個簡單的登入程序，但為了知道每一個Request是否已登入，必需在每一個Action寫上判斷程式，實在太麻煩了，而這邊可以利用Middleware來處理，讓所有未登入都登到登入頁面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> endpoint = context.GetEndpoint();</span><br><span class="line">    <span class="keyword">if</span> (endpoint != <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">var</span> metadata = endpoint.Metadata;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 取得路徑資訊</span></span><br><span class="line">        ControllerActionDescriptor controllerAction = (ControllerActionDescriptor)metadata.SingleOrDefault(x =&gt; x.ToString() == <span class="string">&quot;Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (controllerAction.ControllerName != <span class="string">&quot;Account&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = context.Request.Cookies.SingleOrDefault(x =&gt; x.Key == <span class="string">&quot;auth_token&quot;</span>).Value;</span><br><span class="line">            <span class="keyword">var</span> decode = <span class="keyword">value</span>.ToDecode();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 如果是空的或解碼失敗則導回登入頁面</span></span><br><span class="line">            <span class="keyword">if</span> (String.IsNullOrEmpty(decode))</span><br><span class="line">            &#123;</span><br><span class="line">                context.Response.Redirect(<span class="string">&quot;/Account/Index&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> _next(context);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="權限驗證"><a href="#權限驗證" class="headerlink" title="權限驗證"></a>權限驗證</h2><p>這部份可以參考<a href="/2021/03/25/%E4%BD%BF%E7%94%A8Session%E5%AF%A6%E4%BD%9CLogin/" title="使用Session實作Login">使用Session實作Login</a>中的「客制化授權」，只需調整取得資料的方式，原本是從Session取得資料改變為從Cookie取得資料，這邊就不多作Demo了。</p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Without Identity, Login,ASP.NETCore,Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cookie實作Login-Cookie 的使用</title>
      <link href="2021/04/06/%E4%BD%BF%E7%94%A8Cookie%E5%AF%A6%E4%BD%9CLogind%20-%20Cookie%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/04/06/%E4%BD%BF%E7%94%A8Cookie%E5%AF%A6%E4%BD%9CLogind%20-%20Cookie%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是Cookie"><a href="#什麼是Cookie" class="headerlink" title="什麼是Cookie"></a>什麼是Cookie</h2><p>Cookie可以當作瀏覽器與伺服器的共用筆記本，在每一次的Request時，都會自動的把Cookie向伺服器傳遞，在伺服器每一次的Response時，也都會將Cookie自動傳遞回去。<br>那瀏覽器怎判斷要把Cookie傳遞回去？這就要看Cookie的所記載的屬性來決定，後續的文章會再討論這部份。</p><span id="more"></span><h2 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用"></a>Cookie的使用</h2><p>在 Asp.Net Core 可以直接使用，不需任何設定，直接使用Cooies.Append</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpContext.Response.Cookies.Append(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Value&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/L34DGR7.png" alt="image"></p><h2 id="Cookie的欄位說明"><a href="#Cookie的欄位說明" class="headerlink" title="Cookie的欄位說明"></a>Cookie的欄位說明</h2><p>要先說設定之前先來講講在開發者工作中Cookie的每一個欄位的定義，其中第8項到10都是跟安全性有關系，其中SameSite的設定會影響到站台使用到第三方Cookie的使用。</p><ol><li>Name: 就是Key</li><li>Value: 就是Value</li><li>Domain: 允許那一個host可以接收</li><li>Path: 請求 URL 中的 URL 路徑</li><li>Expires/Max-Age: 特定的日期或者經過一段特定的時間之後才會失效</li><li>Size:cookie的大小</li><li>HttpOnly: 只允許Http傳遞與，也就是說不可以使用JS來讀取，只能使用後端程式碼讀取</li><li>Secure: 只允許HTTPS使用，只允許有使用SSL的站台使用</li><li>SameSite: 跨站請求的方式寄送的限制設定，防止CSRF攻擊，這有點進階，詳細可以參考<a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E5%86%8D%E6%8E%A2%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96-%E8%AB%87-samesite-%E8%A8%AD%E5%AE%9A%E5%B0%8D-cookie-%E7%9A%84%E5%BD%B1%E9%9F%BF%E8%88%87%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85-6195d10d4441">網站安全🔒再探同源政策，談 SameSite 設定對 Cookie 的影響與注意事項</a></li><li>Priority:優先順序，優先等級較低的會被優先被刪除</li></ol><h2 id="Cookie的參數設定"><a href="#Cookie的參數設定" class="headerlink" title="Cookie的參數設定"></a>Cookie的參數設定</h2><p>在Cookie.Append中第三個參數CookieOptions就是用來設定上述的參數，可以移至定義後看的到全部可設定參數。<br><img src="https://i.imgur.com/5hglAhM.png" alt="image"></p><p>依照設定之後，可以看到cookie的變化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpContext.Response.Cookies.Append(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Value&quot;</span>,<span class="keyword">new</span> CookieOptions &#123; </span><br><span class="line">    Expires=DateTime.Now.AddDays(<span class="number">1</span>),</span><br><span class="line">    HttpOnly=<span class="literal">true</span>,</span><br><span class="line">    SameSite=SameSiteMode.Lax,</span><br><span class="line">    Secure=<span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/AuXYKoz.png" alt="image"></p><h2 id="HttpOnly的設定"><a href="#HttpOnly的設定" class="headerlink" title="HttpOnly的設定"></a>HttpOnly的設定</h2><p>將HttpOnly設定改為True/False後，在使用<code>document.cookie</code>測試會發現，將HttpOnlu=true時，無法使用JS讀取，內容為空<br><img src="https://i.imgur.com/XPdeS1i.png" alt="image"></p><p><img src="https://i.imgur.com/0jvhB3E.png" alt="image"></p><h2 id="Expires的設定"><a href="#Expires的設定" class="headerlink" title="Expires的設定"></a>Expires的設定</h2><p>將Expries設定改為<code>DateTime.Now.AddSeconds(20)</code> ，在超過時間後再次存取網頁時，cookie會消失<br><img src="https://i.imgur.com/11NzBzY.gif" alt="image"></p><h2 id="Cookie共編"><a href="#Cookie共編" class="headerlink" title="Cookie共編"></a>Cookie共編</h2><p>在後端從<code>HttpContext.Request.cookies</code>取得cookie後，從<code>HttpContext.Response.cookies.Appen</code>時送出修改後的cookie值</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">value</span> = HttpContext.Request.Cookies.SingleOrDefault(x=&gt;x.Key==<span class="string">&quot;Key&quot;</span>).Value;</span><br><span class="line"></span><br><span class="line">    HttpContext.Response.Cookies.Append(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Value&quot;</span>+<span class="keyword">value</span>, <span class="keyword">new</span> CookieOptions &#123; </span><br><span class="line">        Expires=DateTime.Now.AddDays(<span class="number">1</span>),</span><br><span class="line">        <span class="comment">//HttpOnly=true,</span></span><br><span class="line">        SameSite=SameSiteMode.Lax,</span><br><span class="line">        Secure=<span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前端從<code>document.cookies</code>直接修改，再更新畫面後，送回後端</p><blockquote><p>使用js取得cookies時，是一個字串，而不同組成的格式是<code>key1=value1;key2=value2;...;...</code>，所以如果要作修改最好要另外處理字串拆分與組合</p></blockquote><p><img src="https://i.imgur.com/Wiew3Re.gif" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Without Identity, Login,ASP.NETCore,Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 AJAX 與 Action 接值問題</title>
      <link href="2021/04/01/%E4%BD%BF%E7%94%A8%20AJAX%20%E8%88%87%20Action%20%E6%8E%A5%E5%80%BC%E5%95%8F%E9%A1%8C/"/>
      <url>2021/04/01/%E4%BD%BF%E7%94%A8%20AJAX%20%E8%88%87%20Action%20%E6%8E%A5%E5%80%BC%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-AJAX-與-Action-接值問題？"><a href="#使用-AJAX-與-Action-接值問題？" class="headerlink" title="使用 AJAX 與 Action 接值問題？"></a>使用 AJAX 與 Action 接值問題？</h2><p>在使用AJAX時，常常會發生後端接不到值等等問題，通常都是邊寫邊Try到通為止，但時間一久又忘記怎樣的組合才對的，於是來作一個比較表吧，首先把會影響的變數列一下：</p><ul><li>前端：<ul><li>content-type的設定</li><li>資料是否要序例化為字串</li></ul></li><li>後端：<ul><li>FromBody是否要使用</li><li>在不同域的情境</li></ul></li></ul><blockquote><p>415:Unsupported Media Type<br>cors error:Cross-Origin Resource Sharing (CORS) is a standard that allows a server to relax the same-origin policy.</p></blockquote><span id="more"></span><h3 id="參數設定問題"><a href="#參數設定問題" class="headerlink" title="參數設定問題"></a>參數設定問題</h3><ul><li><p>情境假設：</p><ul><li>使用JQuery的$.AJAX</li><li>後端使用ASP.NET Core MVC</li><li>沒有跨域問題</li></ul></li><li><p>使用FromBody</p></li></ul><table><thead><tr><th>contentType</th><th>data</th><th>request</th></tr></thead><tbody><tr><td>application/json</td><td>JSON.stringify</td><td>OK</td></tr><tr><td>application/json</td><td>Object</td><td>null</td></tr><tr><td>none</td><td>JSON.stringify</td><td>415</td></tr><tr><td>none</td><td>Object</td><td>415</td></tr></tbody></table><ul><li>不使用FromBody</li></ul><table><thead><tr><th>contentType</th><th>data</th><th>request</th></tr></thead><tbody><tr><td>application/json</td><td>JSON.stringify</td><td>null</td></tr><tr><td>application/json</td><td>Object</td><td>null</td></tr><tr><td>none</td><td>JSON.stringify</td><td>null</td></tr><tr><td>none</td><td>object</td><td>OK</td></tr></tbody></table><p><img src="https://i.imgur.com/qZ4dNtD.png" alt="Image"></p><h3 id="CORS問題"><a href="#CORS問題" class="headerlink" title="CORS問題"></a>CORS問題</h3><ul><li><p>情境假設：</p><ul><li>使用JQuery的$.AJAX</li><li>後端使用ASP.NET Core MVC</li><li>有跨域問題<ul><li>站台是否允許可跨站</li></ul></li></ul></li><li><p>allow cross site &amp;&amp; use FromBody</p><table><thead><tr><th>contentType</th><th>data</th><th>request</th><th>response</th></tr></thead><tbody><tr><td>application/json</td><td>JSON.stringify</td><td>OK</td><td>OK</td></tr><tr><td>application/json</td><td>Object</td><td>null</td><td>OK</td></tr><tr><td>none</td><td>JSON.stringify</td><td>415</td><td></td></tr><tr><td>none</td><td>Object</td><td>415</td><td></td></tr></tbody></table></li><li><p>allow cross site &amp;&amp; not use FromBody</p><table><thead><tr><th>contentType</th><th>data</th><th>request</th><th>response</th></tr></thead><tbody><tr><td>application/json</td><td>JSON.stringify</td><td>null</td><td>OK</td></tr><tr><td>application/json</td><td>Object</td><td>null</td><td>OK</td></tr><tr><td>none</td><td>JSON.stringify</td><td>null</td><td>OK</td></tr><tr><td>none</td><td>Object</td><td>OK</td><td>OK</td></tr></tbody></table></li></ul><p><img src="https://i.imgur.com/0lNJKCG.png" alt="Image"></p><ul><li><p>not allow cross site &amp;&amp; use FromBody</p><table><thead><tr><th>contentType</th><th>data</th><th>request</th><th>response</th></tr></thead><tbody><tr><td>application/json</td><td>JSON.stringify</td><td>CORS error</td><td></td></tr><tr><td>application/json</td><td>Object</td><td>CORS error</td><td></td></tr><tr><td>none</td><td>JSON.stringify</td><td>CORS error</td><td></td></tr><tr><td>none</td><td>Object</td><td>CORS error</td><td></td></tr></tbody></table></li><li><p>not allow cross site &amp;&amp; not use FromBody</p><table><thead><tr><th>contentType</th><th>data</th><th>request</th><th>response</th></tr></thead><tbody><tr><td>application/json</td><td>JSON.stringify</td><td>null</td><td>CORS error</td></tr><tr><td>application/json</td><td>Object</td><td>null</td><td>CORS error</td></tr><tr><td>none</td><td>JSON.stringify</td><td>null</td><td>CORS error</td></tr><tr><td>none</td><td>Object</td><td>OK</td><td>CORS error</td></tr></tbody></table></li></ul><p><img src="https://i.imgur.com/VRcjweh.png" alt="Image"></p><ul><li>結論<ul><li>使用ContentType為Json時，data一定要使用JSON.stringify</li><li>沒有使用ContentType時，data可以使用轉入Object</li><li>可以跨域與同站行為相同</li><li>不可跨域時<ul><li>有使用FromBody，會直接出Cors error，進不了Action</li><li>沒使用FromBody，Response會出現Cors error, 且有機會把資料傳入Action</li></ul></li></ul></li></ul><h2 id="完整的腦圖"><a href="#完整的腦圖" class="headerlink" title="完整的腦圖"></a>完整的腦圖</h2><p><a href="https://gitmind.com/app/doc/83eb669342c5b87f51a3a11abbc9a257">完整的腦圖</a></p>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> ASP.NETCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>親子簡易手作餅乾</title>
      <link href="2021/03/29/%E8%A6%AA%E5%AD%90%E7%B0%A1%E6%98%93%E6%89%8B%E4%BD%9C%E9%A4%85%E4%B9%BE/"/>
      <url>2021/03/29/%E8%A6%AA%E5%AD%90%E7%B0%A1%E6%98%93%E6%89%8B%E4%BD%9C%E9%A4%85%E4%B9%BE/</url>
      
        <content type="html"><![CDATA[<p>最近燃起烘培魂，以前一直覺得會烘培的對我來說是一種遙不可及的事，受到<a href="https://www.books.com.tw/products/0010776629">微精通</a>啟發，凡事作就對了，要前進的第一步就是Google，而第一篇就是 <a href="https://mamibuy.com.tw/talk/article/158490">初學者必學～超簡易手工烤餅乾</a>，覺得困難度不高，就開始動手Go Go</p><span id="more"></span><h2 id="準備材料"><a href="#準備材料" class="headerlink" title="準備材料"></a>準備材料</h2><ol><li>奶油  100g</li><li>砂糖 40g<br> 可以自行調整甜度</li><li>蛋黃 1 顆<br> 可以依口味作調整</li><li>低筋麵粉 200g<br> 與奶油比例為(1:2)右左</li><li>鮮奶 少許<br> 如果麵團太乾時可以加上一些</li><li>最後可以加一些風味的醬料<ol><li>巧克力醬(最好是巧克力粉)</li></ol></li></ol><h2 id="比例計算"><a href="#比例計算" class="headerlink" title="比例計算"></a>比例計算</h2><iframe src="https://codepen.io/JustinChangTW/full/PoWzVEL" width="500px" height="300px" frameborder="0" scrolling="no"> </iframe><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li><p>先將奶油打散或是融化成液狀後打發</p></li><li><p>將砂糖加入，與奶油充分混合<br><img src="https://i.imgur.com/KSSWxVy.png" alt="Image"></p></li><li><p>將蛋黃加入，再次充分混合<br><img src="https://i.imgur.com/o7S3NNb.png" alt="Image"></p></li><li><p>將麵份加入，充分混合至看不見白色麵粉<br><img src="https://i.imgur.com/Vvsl699.png" alt="Image"></p></li><li><p>將完成好的麵團桿平<br> 也可以利用夾鏈袋，可以桿出漂亮的麵皮<br><img src="https://i.imgur.com/Bd1j7Nd.png" alt="Image"></p></li><li><p>將麵皮冷藏10分鐘，這樣麵皮比較不會散掉，方便壓模</p></li><li><p>透過壓模將麵皮，製作出不一樣的圖案<br><img src="https://i.imgur.com/E5ekHnW.png" alt="Image"></p></li><li><p>要烤之前先將烤箱預熱，大約烤7~8分鐘<br> 每一台烤箱的溫度都不一樣，這就要自行調控<br><img src="https://i.imgur.com/6BojGca.png" alt="Image"><br><img src="https://i.imgur.com/G2JdK61.png" alt="Image"><br><img src="https://i.imgur.com/c9gZB3Q.png" alt="Image"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 烘培 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 親子 </tag>
            
            <tag> 烘培 </tag>
            
            <tag> 手作餅乾 </tag>
            
            <tag> 微精通 </tag>
            
            <tag> 人生清單 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>開發/線上小工具</title>
      <link href="2021/03/25/%E9%96%8B%E7%99%BC_%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>2021/03/25/%E9%96%8B%E7%99%BC_%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="開發-線上小工具"><a href="#開發-線上小工具" class="headerlink" title="開發/線上小工具"></a>開發/線上小工具</h1><h2 id="產生Html表格"><a href="#產生Html表格" class="headerlink" title="產生Html表格"></a>產生Html表格</h2><blockquote><p><a href="https://www.tablesgenerator.com/html_tables">https://www.tablesgenerator.com/html_tables</a><br><a href="https://divtable.com/table-styler/">https://divtable.com/table-styler/</a></p></blockquote><h2 id="cron-表達"><a href="#cron-表達" class="headerlink" title="cron 表達"></a>cron 表達</h2><blockquote><p><a href="https://crontab.guru/">https://crontab.guru/</a></p></blockquote><h2 id="UML產生語"><a href="#UML產生語" class="headerlink" title="UML產生語"></a>UML產生語</h2><blockquote><p><a href="https://plantuml.com/zh/sequence-diagram">https://plantuml.com/zh/sequence-diagram</a></p></blockquote><span id="more"></span><h2 id="Regex-正規測試"><a href="#Regex-正規測試" class="headerlink" title="Regex 正規測試"></a>Regex 正規測試</h2><blockquote><p><a href="https://regex101.com/">https://regex101.com/</a></p></blockquote><h2 id="JsonToClass"><a href="#JsonToClass" class="headerlink" title="JsonToClass"></a>JsonToClass</h2><blockquote><p><a href="https://app.quicktype.io/?l=csharp">https://app.quicktype.io/?l=csharp</a></p></blockquote><h2 id="文字模板"><a href="#文字模板" class="headerlink" title="文字模板"></a>文字模板</h2><p>Scriban</p><blockquote><p><a href="https://github.com/lunet-io/scriban">https://github.com/lunet-io/scriban</a><br><a href="https://scribanonline.azurewebsites.net/">https://scribanonline.azurewebsites.net/</a></p></blockquote><h2 id="文字轉計算"><a href="#文字轉計算" class="headerlink" title="文字轉計算"></a>文字轉計算</h2><p>mXparser</p><blockquote><p><a href="http://mathparser.org/">http://mathparser.org/</a></p></blockquote><h2 id="suggest"><a href="#suggest" class="headerlink" title="suggest"></a>suggest</h2><blockquote><p><a href="https://vuejsexamples.com/mention-popper-for-input-and-textarea-with-vue-js/">https://vuejsexamples.com/mention-popper-for-input-and-textarea-with-vue-js/</a><br><a href="https://github.com/pfrazee/suggest-box">https://github.com/pfrazee/suggest-box</a><br><a href="https://blog.csdn.net/kingwolfofsky/article/details/6586029">https://blog.csdn.net/kingwolfofsky/article/details/6586029</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;InputPostion&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;textarea id&#x3D;&quot;text&quot; onkeyup&#x3D;&quot;show(this) &quot; style&#x3D;&quot;width: 340px; height: 210px; &quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">    &lt;br &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; onkeyup&#x3D;&quot;show(this) &quot; style&#x3D;&quot;width: 340px; &quot; &#x2F;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;show&quot; style&#x3D;&quot;width: 34px; height: 13px; background: #eee; position: absolute;border:1px solid grey;font-size:13px; display:none; &quot;&gt;Tips&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var suggester &#x3D; &#123;</span><br><span class="line">            &#x2F;**</span><br><span class="line">             * 获取输入光标在页面中的坐标</span><br><span class="line">             * @param  &#123;HTMLElement&#125; 输入框元素        </span><br><span class="line">             * @return  &#123;Object&#125;  返回left和top,bottom</span><br><span class="line">             *&#x2F;</span><br><span class="line">            getInputPositon: function(elem) &#123;</span><br><span class="line">                if (document.selection) &#123; &#x2F;&#x2F;IE Support</span><br><span class="line">                    elem.focus();</span><br><span class="line">                    var Sel &#x3D; document.selection.createRange();</span><br><span class="line">                    return &#123;</span><br><span class="line">                        left: Sel.boundingLeft,</span><br><span class="line">                        top: Sel.boundingTop,</span><br><span class="line">                        bottom: Sel.boundingTop + Sel.boundingHeight</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    var that &#x3D; this;</span><br><span class="line">                    var cloneDiv &#x3D; &#39;&#123;$clone_div&#125;&#39;</span><br><span class="line">                    var cloneLeft &#x3D; &#39;&#123;$cloneLeft&#125;&#39;</span><br><span class="line">                    var cloneFocus &#x3D; &#39;&#123;$cloneFocus&#125;&#39;</span><br><span class="line">                    var cloneRight &#x3D; &#39;&#123;$cloneRight&#125;&#39;</span><br><span class="line">                    var none &#x3D; &#39;&lt;span style&#x3D;&quot;white-space:pre-wrap;&quot;&gt; &lt;&#x2F;span&gt;&#39;</span><br><span class="line">                    var div &#x3D; elem[cloneDiv] || document.createElement(&#39;div&#39;)</span><br><span class="line">                    var focus &#x3D; elem[cloneFocus] || document.createElement(&#39;span&#39;)</span><br><span class="line">                    var text &#x3D; elem[cloneLeft] || document.createElement(&#39;span&#39;)</span><br><span class="line">                    var offset &#x3D; that._offset(elem)</span><br><span class="line">                    var index &#x3D; this._getFocus(elem)</span><br><span class="line">                    var focusOffset &#x3D; &#123;</span><br><span class="line">                        left: 0,</span><br><span class="line">                        top: 0</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    if (!elem[cloneDiv]) &#123;</span><br><span class="line">                        elem[cloneDiv] &#x3D; div, elem[cloneFocus] &#x3D; focus;</span><br><span class="line">                        elem[cloneLeft] &#x3D; text;</span><br><span class="line">                        div.appendChild(text);</span><br><span class="line">                        div.appendChild(focus);</span><br><span class="line">                        document.body.appendChild(div);</span><br><span class="line">                        focus.innerHTML &#x3D; &#39;|&#39;;</span><br><span class="line">                        focus.style.cssText &#x3D; &#39;display:inline-block;width:0px;overflow:hidden;z-index:-100;word-wrap:break-word;word-break:break-all;&#39;;</span><br><span class="line">                        div.className &#x3D; this._cloneStyle(elem);</span><br><span class="line">                        div.style.cssText &#x3D; &#39;visibility:hidden;display:inline-block;position:absolute;z-index:-100;word-wrap:break-word;word-break:break-all;overflow:hidden;&#39;;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    div.style.left &#x3D; this._offset(elem).left + &quot;px&quot;;</span><br><span class="line">                    div.style.top &#x3D; this._offset(elem).top + &quot;px&quot;;</span><br><span class="line">                    var strTmp &#x3D; elem.value.substring(0, index).replace(&#x2F;&lt;&#x2F;g, &#39;&lt;&#39;).replace(&#x2F;&gt;&#x2F;g, &#39;&gt;&#39;).replace(&#x2F;\n&#x2F;g, &#39;&lt;br&#x2F;&gt;&#39;).replace(&#x2F;\s&#x2F;g, none);</span><br><span class="line">                    text.innerHTML &#x3D; strTmp;</span><br><span class="line"></span><br><span class="line">                    focus.style.display &#x3D; &#39;inline-block&#39;;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        focusOffset &#x3D; this._offset(focus);</span><br><span class="line">                    &#125; catch (e) &#123;&#125;;</span><br><span class="line">                    focus.style.display &#x3D; &#39;none&#39;;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        left: focusOffset.left,</span><br><span class="line">                        top: focusOffset.top,</span><br><span class="line">                        bottom: focusOffset.bottom</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 克隆元素样式并返回类</span><br><span class="line">            _cloneStyle: function(elem, cache) &#123;</span><br><span class="line">                if (!cache &amp;&amp; elem[&#39;$&#123;cloneName&#125;&#39;]) return elem[&#39;$&#123;cloneName&#125;&#39;];</span><br><span class="line">                var className, name, rstyle &#x3D; &#x2F;^(number|string)$&#x2F;;</span><br><span class="line">                var rname &#x3D; &#x2F;^(content|outline|outlineWidth)$&#x2F;; &#x2F;&#x2F;Opera: content; IE8:outline &amp;&amp; outlineWidth</span><br><span class="line">                var cssText &#x3D; [],</span><br><span class="line">                    sStyle &#x3D; elem.style;</span><br><span class="line"></span><br><span class="line">                for (name in sStyle) &#123;</span><br><span class="line">                    if (!rname.test(name)) &#123;</span><br><span class="line">                        val &#x3D; this._getStyle(elem, name);</span><br><span class="line">                        if (val !&#x3D;&#x3D; &#39;&#39; &amp;&amp; rstyle.test(typeof val)) &#123; &#x2F;&#x2F; Firefox 4</span><br><span class="line">                            name &#x3D; name.replace(&#x2F;([A-Z])&#x2F;g, &quot;-$1&quot;).toLowerCase();</span><br><span class="line">                            cssText.push(name);</span><br><span class="line">                            cssText.push(&#39;:&#39;);</span><br><span class="line">                            cssText.push(val);</span><br><span class="line">                            cssText.push(&#39;;&#39;);</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;;</span><br><span class="line">                cssText &#x3D; cssText.join(&#39;&#39;);</span><br><span class="line">                elem[&#39;$&#123;cloneName&#125;&#39;] &#x3D; className &#x3D; &#39;clone&#39; + (new Date).getTime();</span><br><span class="line">                this._addHeadStyle(&#39;.&#39; + className + &#39;&#123;&#39; + cssText + &#39;&#125;&#39;);</span><br><span class="line">                return className;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 向页头插入样式</span><br><span class="line">            _addHeadStyle: function(content) &#123;</span><br><span class="line">                var style &#x3D; this._style[document];</span><br><span class="line">                if (!style) &#123;</span><br><span class="line">                    style &#x3D; this._style[document] &#x3D; document.createElement(&#39;style&#39;);</span><br><span class="line">                    document.getElementsByTagName(&#39;head&#39;)[0].appendChild(style);</span><br><span class="line">                &#125;;</span><br><span class="line">                style.styleSheet &amp;&amp; (style.styleSheet.cssText +&#x3D; content) || style.appendChild(document.createTextNode(content));</span><br><span class="line">            &#125;,</span><br><span class="line">            _style: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 获取最终样式</span><br><span class="line">            _getStyle: &#39;getComputedStyle&#39; in window ? function(elem, name) &#123;</span><br><span class="line">                return getComputedStyle(elem, null)[name];</span><br><span class="line">            &#125; : function(elem, name) &#123;</span><br><span class="line">                return elem.currentStyle[name];</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 获取光标在文本框的位置</span><br><span class="line">            _getFocus: function(elem) &#123;</span><br><span class="line">                var index &#x3D; 0;</span><br><span class="line">                if (document.selection) &#123; &#x2F;&#x2F; IE Support</span><br><span class="line">                    elem.focus();</span><br><span class="line">                    var Sel &#x3D; document.selection.createRange();</span><br><span class="line">                    if (elem.nodeName &#x3D;&#x3D;&#x3D; &#39;TEXTAREA&#39;) &#123; &#x2F;&#x2F;textarea</span><br><span class="line">                        var Sel2 &#x3D; Sel.duplicate();</span><br><span class="line">                        Sel2.moveToElementText(elem);</span><br><span class="line">                        var index &#x3D; -1;</span><br><span class="line">                        while (Sel2.inRange(Sel)) &#123;</span><br><span class="line">                            Sel2.moveStart(&#39;character&#39;);</span><br><span class="line">                            index++;</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125; else if (elem.nodeName &#x3D;&#x3D;&#x3D; &#39;INPUT&#39;) &#123; &#x2F;&#x2F; input</span><br><span class="line">                        Sel.moveStart(&#39;character&#39;, -elem.value.length);</span><br><span class="line">                        index &#x3D; Sel.text.length;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (elem.selectionStart || elem.selectionStart &#x3D;&#x3D; &#39;0&#39;) &#123; &#x2F;&#x2F; Firefox support</span><br><span class="line">                    index &#x3D; elem.selectionStart;</span><br><span class="line">                &#125;</span><br><span class="line">                return (index);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 获取元素在页面中位置</span><br><span class="line">            _offset: function(elem) &#123;</span><br><span class="line">                var box &#x3D; elem.getBoundingClientRect(),</span><br><span class="line">                    doc &#x3D; elem.ownerDocument,</span><br><span class="line">                    body &#x3D; doc.body,</span><br><span class="line">                    docElem &#x3D; doc.documentElement;</span><br><span class="line">                var clientTop &#x3D; docElem.clientTop || body.clientTop || 0,</span><br><span class="line">                    clientLeft &#x3D; docElem.clientLeft || body.clientLeft || 0;</span><br><span class="line">                var top &#x3D; box.top + (self.pageYOffset || docElem.scrollTop) - clientTop,</span><br><span class="line">                    left &#x3D; box.left + (self.pageXOffset || docElem.scrollLeft) - clientLeft;</span><br><span class="line">                return &#123;</span><br><span class="line">                    left: left,</span><br><span class="line">                    top: top,</span><br><span class="line">                    right: left + box.width,</span><br><span class="line">                    bottom: top + box.height</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        function getPosition(ctrl) &#123;</span><br><span class="line">            var p &#x3D; suggester.getInputPositon(ctrl);</span><br><span class="line">            document.getElementById(&#39;show&#39;).style.left &#x3D; p.left + &quot;px&quot;;</span><br><span class="line">            document.getElementById(&#39;show&#39;).style.top &#x3D; p.bottom + &quot;px&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript &quot;&gt;</span><br><span class="line">        function show(elem) &#123;</span><br><span class="line">            var p &#x3D; suggester.getInputPositon(elem);</span><br><span class="line">            var s &#x3D; document.getElementById(&#39;show&#39;);</span><br><span class="line">            s.style.top &#x3D; p.bottom + &#39;px&#39;;</span><br><span class="line">            s.style.left &#x3D; p.left + &#39;px&#39;;</span><br><span class="line">            s.style.display &#x3D; &#39;inherit&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="POSMAN"><a href="#POSMAN" class="headerlink" title="POSMAN"></a>POSMAN</h2><h3 id="從Chrome複制curl"><a href="#從Chrome複制curl" class="headerlink" title="從Chrome複制curl"></a>從Chrome複制curl</h3><ol><li>從chrome開發者工具選擇netword，選擇copy的request,滑鼠右鍵選擇copy/copy as cURL(bash)<br><img src="https://i.imgur.com/HoANE7Z.png"></li><li>開啟postman，從上方import，後選擇Paste Raw Text<br><img src="https://i.imgur.com/LIiIrL3.png"></li><li>上述完成後，執行import，會出現「error while importing curl typeerror invalid format for curl.」，這是因為postman不支援<code>--compressed</code>語法，刪除後再執行就解決了<br><img src="https://i.imgur.com/8sbX8V3.png"></li></ol><blockquote><p><a href="https://github.com/postmanlabs/postman-app-support/issues/5735">https://github.com/postmanlabs/postman-app-support/issues/5735</a></p></blockquote><hr><h2 id="目錄匯出檔案"><a href="#目錄匯出檔案" class="headerlink" title="目錄匯出檔案"></a>目錄匯出檔案</h2><ul><li>透過簡單dos指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir &#x2F;b &#x2F;s *.* &gt; file_list.xls</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://steachs.com/archives/51787">將資料夾底下的全部檔案列表出來，並儲存成 Excel 檔案</a></p></blockquote><ul><li>使用黑大C#程式</li></ul><blockquote><p><a href="https://blog.darkthread.net/blog/export-file-struc-as-excel/">【潛盾機】將檔案結構匯成Excel文件</a></p></blockquote><ul><li>使用「DirPrintOK 」</li></ul><blockquote><p><a href="https://key.chtouch.com/ContentView.aspx?P=3075">DirPrintOK 匯出目錄下的資料夾、檔案名稱也可以很簡單</a></p></blockquote><ul><li><p>如果是使用WIN10<br>先全選，再使用「複製路徑」<br><img src="https://i.imgur.com/HTKVBJK.png"></p></li><li><p>如果有使用Chrome<br>直接將資料匣拖洩到Chrome<br><img src="https://i.imgur.com/MvA0iJP.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 開發 </tag>
            
            <tag> 線上 </tag>
            
            <tag> 小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Session實作Login</title>
      <link href="2021/03/25/%E4%BD%BF%E7%94%A8Session%E5%AF%A6%E4%BD%9CLogin/"/>
      <url>2021/03/25/%E4%BD%BF%E7%94%A8Session%E5%AF%A6%E4%BD%9CLogin/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Session實作Login"><a href="#使用Session實作Login" class="headerlink" title="使用Session實作Login"></a>使用Session實作Login</h1><h2 id="啟動session"><a href="#啟動session" class="headerlink" title="啟動session"></a>啟動session</h2><p>要在 ASP.NET Core 啟用 session 只需在 Startup.cs 兩個步驟：</p><ol><li>在ConfigureServices加上session服務</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    services.AddSession(); <span class="comment">//加上session服務</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>在Configure加上Middoware</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">    app.UseSession();  <span class="comment">//加上Middoware</span></span><br><span class="line"></span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllerRoute(</span><br><span class="line">            name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            pattern: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存取Session，在HomeController的Privacy加上存取 session 語法,</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Privacy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">    <span class="keyword">var</span> us = HttpContext.Session.GetString(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> pd = HttpContext.Session.GetString(<span class="string">&quot;Password&quot;</span>);</span><br><span class="line">    HttpContext.Session.SetString(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;Demo&quot;</span>);</span><br><span class="line">    HttpContext.Session.SetString(<span class="string">&quot;Password&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成上面的步驟，來測試一下<br><img src="https://i.imgur.com/G2LDc3P.gif" alt="demo1"><br>應該不難發現在開啟Privacy時，Cookies出現了 <code>.AspNetCore.Session</code>，Value則是一長串，<br>明明是使用Session為什麼會出現Cooke呢？<br>這是因為HTTP是無狀態,為了辦認出是誰來請求，所以必需將SessionId回傳到後端，<br>而 <code>.AspNetCore.Session</code>就是SessionId，</p><p>接下來用Debug來觀察Session的存取<br><img src="https://i.imgur.com/jY5JYa3.gif" alt="demo2"><br>在第一次進入Privacy時 Get Session 是 null,<br>第二次進入時 Get Session 就會取得上一次存入的值</p><h2 id="Session的安全設定"><a href="#Session的安全設定" class="headerlink" title="Session的安全設定"></a>Session的安全設定</h2><p>基於資安考量必須對session的權限作限縮，詳細的說明請參閱<a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.builder.sessionoptions?view=aspnetcore-5.0">SessionOptions 類別</a></p><ol><li>不用使用預設的 cookie Name</li><li>session存活時間，預設值是 20 分鐘</li><li>限制session取出的時間，預設值是1分鐘</li><li>限制第三方讀取Cookie</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">    services.AddSession(options=&gt;&#123;</span><br><span class="line">        options.Cookie.Name = <span class="string">&quot;WithSessionId&quot;</span>; <span class="comment">//設定Cookie的Name名稱</span></span><br><span class="line">        options.Cookie.SecurePolicy = CookieSecurePolicy.Always; <span class="comment">//只允許HTTPS讀取Cookie</span></span><br><span class="line">        options.Cookie.SameSite = SameSiteMode.Lax; <span class="comment">//限制第三方Cookie使用</span></span><br><span class="line">        options.IdleTimeout = TimeSpan.FromSeconds(<span class="number">10</span>); <span class="comment">//設定Session有效時間</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新啟動後，再次查看一下開發者工具，就會發現Cookie的Key改變為「WithSessionId」<br><img src="https://i.imgur.com/cJYk8oP.png"></p><p>再來測試一下經過10秒後，讀取Session的情況<br><img src="https://i.imgur.com/9CYMs48.gif"></p><h2 id="實作登入與登出Action"><a href="#實作登入與登出Action" class="headerlink" title="實作登入與登出Action"></a>實作登入與登出Action</h2><ol><li>新增登入用ViewModel<br>規避常用的帳號密碼關鍵字，因為現在資安的議題被大家所重視，所以大部份的公司都會使用源碼檢測工具來產生報告，會從程式的特徵來判讀是否有資安疑慮，但問題來了大部的的檢測工具會把Id、User、Password等，經常用來作權限管理的關鍵字抓出在報告中呈現(通常是中風險)，雖然檢測工具的用意是用來提醒開發人員必需要特別留意或必需加強管理就可以排外，但往往「沒有人」可以負責放行，因為一但決定放行，將來被究責時會背上一鍋，所以在設計當初迴避就是最簡單的方式，也可以用一些公司自定義的縮寫也是一個不錯的選擇。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginModel</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 識別ID(不使用User、Name、ID等，減少被弱掃或攻擊到的機會)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">StringLength(30,ErrorMessage =<span class="meta-string">&quot;長度不符合規定&quot;</span>,MinimumLength =3)</span>]</span><br><span class="line">    [<span class="meta">Display(Name =<span class="meta-string">&quot;帳號&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Badge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 密碼(不使用Password，減少被弱掃或攻擊到的機會)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">StringLength(30, ErrorMessage = <span class="meta-string">&quot;長度不符合規定&quot;</span>, MinimumLength = 10)</span>]</span><br><span class="line">    [<span class="meta">DataType(DataType.Password)</span>]</span><br><span class="line">    [<span class="meta">Display(Name =<span class="meta-string">&quot;密碼&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CipherCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>透過ViewModel產生畫面<br><img src="https://i.imgur.com/BeebNKb.png" alt="image"><br><img src="https://i.imgur.com/rTMgOF8.png" alt="image"></p></li><li><p>實作登錄Action</p><ul><li>目前並未有實作帳號儲存的方式，所以先HardCode一組帳號作為帳密驗證,真實的世界必須要將帳號存入資料庫中，並且密碼最少一種加密的方式，不可在存入未加密的字串。</li><li>在登入後還會去取得授權(可以操作系統的Function或功能)，在登入也會將此角色、授權及使用者相關系資訊存入session中，提供給系統作為授權的判斷。</li><li>最後登出只要呼叫<code>HttpContext.Session.Clear()</code>就以清空這一組sessionId所存的資料。</li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Login</span>(<span class="params">LoginModel login</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(login.Badge==<span class="string">&quot;Justin&quot;</span> &amp;&amp; login.CipherCode == <span class="string">&quot;1234567890&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//當登入成功後，將使用者資訊存入Session中</span></span><br><span class="line">        HttpContext.Session.SetString(<span class="string">&quot;User&quot;</span>, login.Badge);</span><br><span class="line">        HttpContext.Session.SetString(<span class="string">&quot;Role&quot;</span>, <span class="string">&quot;administraotr&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(HomeController.Index), <span class="string">&quot;Home&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> View(<span class="keyword">nameof</span>(AccountController.Index), login);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Logout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpContext.Session.Clear();</span><br><span class="line">    <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(HomeController.Index), <span class="string">&quot;Home&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構session存取-使用擴充方式"><a href="#重構session存取-使用擴充方式" class="headerlink" title="重構session存取, 使用擴充方式"></a>重構session存取, 使用擴充方式</h2><p>session在存取只能一個key取出一個value，相反也是一樣，只有清空可以用一個指令完成，而在系統大量操作session時這就會顯的非常麻煩, 所以可以針對Session擴允的個方法，來操作一整個物件的存入與取得值<br>在</p><ul><li>建立UserInfo</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Role &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>建立SessionExtenstion</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SessionExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> KEY= <span class="string">&quot;SESSION&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Set</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> ISession session,T Data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        session.SetString(KEY, JsonSerializer.Serialize(Data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Get</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> ISession session</span>)<span class="keyword">where</span> T:<span class="keyword">new</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = session.GetString(KEY);</span><br><span class="line">        <span class="keyword">return</span> data!=<span class="literal">null</span>?JsonSerializer.Deserialize&lt;T&gt;(data):<span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>調整Account中存取Session的方式<ul><li>存入</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpContext.Session.Set(<span class="keyword">new</span> UserInfo()</span><br><span class="line">&#123;</span><br><span class="line">    Name = login.Badge,</span><br><span class="line">    Role = <span class="string">&quot;administraotr&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>讀取</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userinfo = HttpContext.Session.Get&lt;UserInfo&gt;();</span><br></pre></td></tr></table></figure></li></ul><h2 id="客制化授權"><a href="#客制化授權" class="headerlink" title="客制化授權"></a>客制化授權</h2><p>由於原生的Authorize不支援session，所以可以簡單寫一個客制的授權方式，只判斷是是否已登入，否則跳回首頁</p><ol><li>SessionAuthorizeAttribute</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.All, AllowMultiple = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SessionAuthorizeAttribute</span>:<span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>SessionAuthorizeMiddleware<br>這邊主要知道的是怎麼取得Meadata(也就是Attribute),與怎麼判斷有掛上所定義的,再者是Response怎麼回應，最後是每個<code>await _next(content) </code>之後都必須<code>return;</code></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SessionAuthorizeMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionAuthorizeMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//1. 取得有所有的Meatdata</span></span><br><span class="line">        <span class="keyword">var</span> metaData = context.GetEndpoint().Metadata;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 是否有使用SessionAuthorizeAttribute</span></span><br><span class="line">        <span class="keyword">var</span> hasSessionAuthorizeAttribute = metaData.Any(x =&gt; x.ToString().EndsWith(<span class="keyword">nameof</span>(SessionAuthorizeAttribute)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 沒使用不判斷</span></span><br><span class="line">        <span class="keyword">if</span> (!hasSessionAuthorizeAttribute)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next(context);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 判斷權角色是否是管理者</span></span><br><span class="line">        <span class="keyword">var</span> userInfo = context.Session.Get&lt;UserInfo&gt;();</span><br><span class="line">        <span class="keyword">if</span> (userInfo != <span class="literal">null</span> &amp;&amp; userInfo.Role == <span class="string">&quot;administrator&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next(context);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 如果未登入，則回應403</span></span><br><span class="line">        <span class="keyword">if</span> (userInfo?.Name == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Response.StatusCode = (<span class="built_in">int</span>)HttpStatusCode.Forbidden;</span><br><span class="line">            _message = <span class="string">&quot;&#123;\&quot;code\&quot;:403,\&quot;message\&quot;:\&quot;無訪問權限 Forbidden\&quot;&#125;&quot;</span>;</span><br><span class="line">            context.Response.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">            <span class="keyword">await</span> context.Response.Body.WriteAsync(Encoding.UTF8.GetBytes(_message), <span class="number">0</span>, Encoding.UTF8.GetBytes(_message).Length);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 如果未被授權，則回應401</span></span><br><span class="line">        context.Response.StatusCode = (<span class="built_in">int</span>)HttpStatusCode.Unauthorized;</span><br><span class="line">        _message = <span class="string">&quot;&#123;\&quot;code\&quot;:401,\&quot;message\&quot;:\&quot;需要授權 Forbidden\&quot;&#125;&quot;</span>;</span><br><span class="line">        context.Response.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">        <span class="keyword">await</span> context.Response.Body.WriteAsync(Encoding.UTF8.GetBytes(_message), <span class="number">0</span>, Encoding.UTF8.GetBytes(_message).Length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Starup<br>掛上SessionAuthorizeMiddleware，在<code> app.UseSession();</code>之後</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseMiddleware&lt;SessionAuthorizeMiddleware&gt;();</span><br></pre></td></tr></table></figure><ol start="6"><li>Demo<br>我們在Privacy加上<code>[SessionAuthrize]</code>再進行測試<img src="https://i.imgur.com/6J7GKOd.gif"></li></ol><p>這樣就是一個簡單使用Session實作具有帳號管理的功能，不過這範例有些部份沒有完成，像是帳號的儲存、角色的設定等等。</p><blockquote><p>參考：<br><a href="https://docs.microsoft.com/zh-tw/aspnet/core/fundamentals/app-state?view=aspnetcore-3.1#">Session and state management in ASP.NET Core</a><br><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">Cookie 的 SameSite 屬性</a><br><a href="https://zh.codeprj.com/blog/bc27e91.html">ASP.NET Core 3中的自定義授權</a><br><a href="https://blog.csdn.net/weixin_30407613/article/details/98030432">asp.net Core 中AuthorizationHandler 实现自定义授权</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ASP.NET Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NETCore </tag>
            
            <tag> WithoutIdentityLogin </tag>
            
            <tag> Login </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自學英文-聽力</title>
      <link href="2021/03/25/%E8%87%AA%E5%AD%B8%E8%8B%B1%E6%96%87-%E8%81%BD%E5%8A%9B/"/>
      <url>2021/03/25/%E8%87%AA%E5%AD%B8%E8%8B%B1%E6%96%87-%E8%81%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>我自已認為我的聽力能力應該是0，所以從頭開始學習，並記錄一些在學習的過程中的一些領悟，好萬事起頭難，我在VoiceTube選擇A1程度的影片，通過聽寫並打出(或寫出)所聽到的英文，剛開始一句句開始，每一句先看字幕，並重覆聽多次，試圖聽出每一個字。</p><h2 id="English-in-a-Minute-Burn-the-Candle-at-Both-Ends"><a href="#English-in-a-Minute-Burn-the-Candle-at-Both-Ends" class="headerlink" title="English in a Minute: Burn the Candle at Both Ends"></a><a href="https://tw.voicetube.com/v3/videos/157374">English in a Minute: Burn the Candle at Both Ends</a></h2><hr><ul><li>in a 的連音，可以直接聽成弱弱的「依內」</li><li>the 如果在句子中間可以聽成「的」，在句中前面聽成「立」</li><li>at 可聽成「了」</li><li>both ends 的連音可以聽成bothends但重音在ends,<ul><li>both ends :兩端，重音在ends</li></ul></li><li>Burn the candle at both ends<span id="more"></span></li><li>I’ll be 連音，聽成：阿爾比</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英文學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English Study </tag>
            
            <tag> 英文 </tag>
            
            <tag> 自學 </tag>
            
            <tag> 聽力 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
