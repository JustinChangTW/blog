{"pages":[{"title":"categories","permalink":"https://justinchang.ddns.net/categories/index.html","text":""},{"title":"tags","permalink":"https://justinchang.ddns.net/tags/index.html","text":""}],"posts":[{"title":"使用 AJAX 與 Action 接值問題","permalink":"https://justinchang.ddns.net/2021/04/01/%E4%BD%BF%E7%94%A8%20AJAX%20%E8%88%87%20Action%20%E6%8E%A5%E5%80%BC%E5%95%8F%E9%A1%8C/","text":"使用 AJAX 與 Action 接值問題？在使用AJAX時，常常會發生後端接不到值等等問題，通常都是邊寫邊Try到通為止，但時間一久又忘記怎樣的組合才對的，於是來作一個比較表吧，首先把會影響的變數列一下： 前端： content-type的設定 資料是否要序例化為字串 後端： FromBody是否要使用 在不同域的情境 415:Unsupported Media Typecors error:Cross-Origin Resource Sharing (CORS) is a standard that allows a server to relax the same-origin policy. 參數設定問題 情境假設： 使用JQuery的$.AJAX 後端使用ASP.NET Core MVC 沒有跨域問題 使用FromBody contentType data request application/json JSON.stringify OK application/json Object null none JSON.stringify 415 none Object 415 不使用FromBody contentType data request application/json JSON.stringify null application/json Object null none JSON.stringify null none object OK CORS問題 情境假設： 使用JQuery的$.AJAX 後端使用ASP.NET Core MVC 有跨域問題 站台是否允許可跨站 allow cross site &amp;&amp; use FromBody contentType data request response application/json JSON.stringify OK OK application/json Object null OK none JSON.stringify 415 none Object 415 allow cross site &amp;&amp; not use FromBody contentType data request response application/json JSON.stringify null OK application/json Object null OK none JSON.stringify null OK none Object OK OK not allow cross site &amp;&amp; use FromBody contentType data request response application/json JSON.stringify CORS error application/json Object CORS error none JSON.stringify CORS error none Object CORS error not allow cross site &amp;&amp; not use FromBody contentType data request response application/json JSON.stringify null CORS error application/json Object null CORS error none JSON.stringify null CORS error none Object OK CORS error 結論 使用ContentType為Json時，data一定要使用JSON.stringify 沒有使用ContentType時，data可以使用轉入Object 可以跨域與同站行為相同 不可跨域時 有使用FromBody，會直接出Cors error，進不了Action 沒使用FromBody，Response會出現Cors error, 且有機會把資料傳入Action 完整的腦圖完整的腦圖","categories":[{"name":"AJAX","slug":"AJAX","permalink":"https://justinchang.ddns.net/categories/AJAX/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"https://justinchang.ddns.net/tags/AJAX/"},{"name":"ASP.NETCore","slug":"ASP-NETCore","permalink":"https://justinchang.ddns.net/tags/ASP-NETCore/"}]},{"title":"親子簡易手作餅乾","permalink":"https://justinchang.ddns.net/2021/03/29/%E8%A6%AA%E5%AD%90%E7%B0%A1%E6%98%93%E6%89%8B%E4%BD%9C%E9%A4%85%E4%B9%BE/","text":"最近燃起烘培魂，以前一直覺得會烘培的對我來說是一種遙不可及的事，受到微精通啟發，凡事作就對了，要前進的第一步就是Google，而第一篇就是 初學者必學～超簡易手工烤餅乾，覺得困難度不高，就開始動手Go Go 準備材料 奶油 100g 砂糖 40g 可以自行調整甜度 蛋黃 1 顆 可以依口味作調整 低筋麵粉 200g 與奶油比例為(1:2)右左 鮮奶 少許 如果麵團太乾時可以加上一些 最後可以加一些風味的醬料 巧克力醬(最好是巧克力粉) 比例計算 步驟 先將奶油打散或是融化成液狀後打發 將砂糖加入，與奶油充分混合 將蛋黃加入，再次充分混合 將麵份加入，充分混合至看不見白色麵粉 將完成好的麵團桿平 也可以利用夾鏈袋，可以桿出漂亮的麵皮 將麵皮冷藏10分鐘，這樣麵皮比較不會散掉，方便壓模 透過壓模將麵皮，製作出不一樣的圖案 要烤之前先將烤箱預熱，大約烤7~8分鐘 每一台烤箱的溫度都不一樣，這就要自行調控","categories":[{"name":"烘培","slug":"烘培","permalink":"https://justinchang.ddns.net/categories/%E7%83%98%E5%9F%B9/"}],"tags":[{"name":"親子","slug":"親子","permalink":"https://justinchang.ddns.net/tags/%E8%A6%AA%E5%AD%90/"},{"name":"烘培","slug":"烘培","permalink":"https://justinchang.ddns.net/tags/%E7%83%98%E5%9F%B9/"},{"name":"手作餅乾","slug":"手作餅乾","permalink":"https://justinchang.ddns.net/tags/%E6%89%8B%E4%BD%9C%E9%A4%85%E4%B9%BE/"},{"name":"微精通","slug":"微精通","permalink":"https://justinchang.ddns.net/tags/%E5%BE%AE%E7%B2%BE%E9%80%9A/"},{"name":"人生清單","slug":"人生清單","permalink":"https://justinchang.ddns.net/tags/%E4%BA%BA%E7%94%9F%E6%B8%85%E5%96%AE/"}]},{"title":"開發/線上小工具","permalink":"https://justinchang.ddns.net/2021/03/25/%E9%96%8B%E7%99%BC_%E7%B7%9A%E4%B8%8A%E5%B0%8F%E5%B7%A5%E5%85%B7/","text":"開發/線上小工具產生Html表格 https://www.tablesgenerator.com/html_tableshttps://divtable.com/table-styler/ cron 表達 https://crontab.guru/ UML產生語 https://plantuml.com/zh/sequence-diagram Regex 正規測試 https://regex101.com/ JsonToClass https://app.quicktype.io/?l=csharp 文字模板Scriban https://github.com/lunet-io/scribanhttps://scribanonline.azurewebsites.net/ 文字轉計算mXparser http://mathparser.org/ suggest https://vuejsexamples.com/mention-popper-for-input-and-textarea-with-vue-js/https://github.com/pfrazee/suggest-boxhttps://blog.csdn.net/kingwolfofsky/article/details/6586029 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;InputPostion&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;textarea id&#x3D;&quot;text&quot; onkeyup&#x3D;&quot;show(this) &quot; style&#x3D;&quot;width: 340px; height: 210px; &quot;&gt;&lt;&#x2F;textarea&gt; &lt;br &#x2F;&gt; &lt;input type&#x3D;&quot;text&quot; onkeyup&#x3D;&quot;show(this) &quot; style&#x3D;&quot;width: 340px; &quot; &#x2F;&gt; &lt;div id&#x3D;&quot;show&quot; style&#x3D;&quot;width: 34px; height: 13px; background: #eee; position: absolute;border:1px solid grey;font-size:13px; display:none; &quot;&gt;Tips&lt;&#x2F;div&gt; &lt;script&gt; var suggester &#x3D; &#123; &#x2F;** * 获取输入光标在页面中的坐标 * @param &#123;HTMLElement&#125; 输入框元素 * @return &#123;Object&#125; 返回left和top,bottom *&#x2F; getInputPositon: function(elem) &#123; if (document.selection) &#123; &#x2F;&#x2F;IE Support elem.focus(); var Sel &#x3D; document.selection.createRange(); return &#123; left: Sel.boundingLeft, top: Sel.boundingTop, bottom: Sel.boundingTop + Sel.boundingHeight &#125;; &#125; else &#123; var that &#x3D; this; var cloneDiv &#x3D; &#39;&#123;$clone_div&#125;&#39; var cloneLeft &#x3D; &#39;&#123;$cloneLeft&#125;&#39; var cloneFocus &#x3D; &#39;&#123;$cloneFocus&#125;&#39; var cloneRight &#x3D; &#39;&#123;$cloneRight&#125;&#39; var none &#x3D; &#39;&lt;span style&#x3D;&quot;white-space:pre-wrap;&quot;&gt; &lt;&#x2F;span&gt;&#39; var div &#x3D; elem[cloneDiv] || document.createElement(&#39;div&#39;) var focus &#x3D; elem[cloneFocus] || document.createElement(&#39;span&#39;) var text &#x3D; elem[cloneLeft] || document.createElement(&#39;span&#39;) var offset &#x3D; that._offset(elem) var index &#x3D; this._getFocus(elem) var focusOffset &#x3D; &#123; left: 0, top: 0 &#125;; if (!elem[cloneDiv]) &#123; elem[cloneDiv] &#x3D; div, elem[cloneFocus] &#x3D; focus; elem[cloneLeft] &#x3D; text; div.appendChild(text); div.appendChild(focus); document.body.appendChild(div); focus.innerHTML &#x3D; &#39;|&#39;; focus.style.cssText &#x3D; &#39;display:inline-block;width:0px;overflow:hidden;z-index:-100;word-wrap:break-word;word-break:break-all;&#39;; div.className &#x3D; this._cloneStyle(elem); div.style.cssText &#x3D; &#39;visibility:hidden;display:inline-block;position:absolute;z-index:-100;word-wrap:break-word;word-break:break-all;overflow:hidden;&#39;; &#125;; div.style.left &#x3D; this._offset(elem).left + &quot;px&quot;; div.style.top &#x3D; this._offset(elem).top + &quot;px&quot;; var strTmp &#x3D; elem.value.substring(0, index).replace(&#x2F;&lt;&#x2F;g, &#39;&lt;&#39;).replace(&#x2F;&gt;&#x2F;g, &#39;&gt;&#39;).replace(&#x2F;\\n&#x2F;g, &#39;&lt;br&#x2F;&gt;&#39;).replace(&#x2F;\\s&#x2F;g, none); text.innerHTML &#x3D; strTmp; focus.style.display &#x3D; &#39;inline-block&#39;; try &#123; focusOffset &#x3D; this._offset(focus); &#125; catch (e) &#123;&#125;; focus.style.display &#x3D; &#39;none&#39;; return &#123; left: focusOffset.left, top: focusOffset.top, bottom: focusOffset.bottom &#125;; &#125; &#125;, &#x2F;&#x2F; 克隆元素样式并返回类 _cloneStyle: function(elem, cache) &#123; if (!cache &amp;&amp; elem[&#39;$&#123;cloneName&#125;&#39;]) return elem[&#39;$&#123;cloneName&#125;&#39;]; var className, name, rstyle &#x3D; &#x2F;^(number|string)$&#x2F;; var rname &#x3D; &#x2F;^(content|outline|outlineWidth)$&#x2F;; &#x2F;&#x2F;Opera: content; IE8:outline &amp;&amp; outlineWidth var cssText &#x3D; [], sStyle &#x3D; elem.style; for (name in sStyle) &#123; if (!rname.test(name)) &#123; val &#x3D; this._getStyle(elem, name); if (val !&#x3D;&#x3D; &#39;&#39; &amp;&amp; rstyle.test(typeof val)) &#123; &#x2F;&#x2F; Firefox 4 name &#x3D; name.replace(&#x2F;([A-Z])&#x2F;g, &quot;-$1&quot;).toLowerCase(); cssText.push(name); cssText.push(&#39;:&#39;); cssText.push(val); cssText.push(&#39;;&#39;); &#125;; &#125;; &#125;; cssText &#x3D; cssText.join(&#39;&#39;); elem[&#39;$&#123;cloneName&#125;&#39;] &#x3D; className &#x3D; &#39;clone&#39; + (new Date).getTime(); this._addHeadStyle(&#39;.&#39; + className + &#39;&#123;&#39; + cssText + &#39;&#125;&#39;); return className; &#125;, &#x2F;&#x2F; 向页头插入样式 _addHeadStyle: function(content) &#123; var style &#x3D; this._style[document]; if (!style) &#123; style &#x3D; this._style[document] &#x3D; document.createElement(&#39;style&#39;); document.getElementsByTagName(&#39;head&#39;)[0].appendChild(style); &#125;; style.styleSheet &amp;&amp; (style.styleSheet.cssText +&#x3D; content) || style.appendChild(document.createTextNode(content)); &#125;, _style: &#123;&#125;, &#x2F;&#x2F; 获取最终样式 _getStyle: &#39;getComputedStyle&#39; in window ? function(elem, name) &#123; return getComputedStyle(elem, null)[name]; &#125; : function(elem, name) &#123; return elem.currentStyle[name]; &#125;, &#x2F;&#x2F; 获取光标在文本框的位置 _getFocus: function(elem) &#123; var index &#x3D; 0; if (document.selection) &#123; &#x2F;&#x2F; IE Support elem.focus(); var Sel &#x3D; document.selection.createRange(); if (elem.nodeName &#x3D;&#x3D;&#x3D; &#39;TEXTAREA&#39;) &#123; &#x2F;&#x2F;textarea var Sel2 &#x3D; Sel.duplicate(); Sel2.moveToElementText(elem); var index &#x3D; -1; while (Sel2.inRange(Sel)) &#123; Sel2.moveStart(&#39;character&#39;); index++; &#125;; &#125; else if (elem.nodeName &#x3D;&#x3D;&#x3D; &#39;INPUT&#39;) &#123; &#x2F;&#x2F; input Sel.moveStart(&#39;character&#39;, -elem.value.length); index &#x3D; Sel.text.length; &#125; &#125; else if (elem.selectionStart || elem.selectionStart &#x3D;&#x3D; &#39;0&#39;) &#123; &#x2F;&#x2F; Firefox support index &#x3D; elem.selectionStart; &#125; return (index); &#125;, &#x2F;&#x2F; 获取元素在页面中位置 _offset: function(elem) &#123; var box &#x3D; elem.getBoundingClientRect(), doc &#x3D; elem.ownerDocument, body &#x3D; doc.body, docElem &#x3D; doc.documentElement; var clientTop &#x3D; docElem.clientTop || body.clientTop || 0, clientLeft &#x3D; docElem.clientLeft || body.clientLeft || 0; var top &#x3D; box.top + (self.pageYOffset || docElem.scrollTop) - clientTop, left &#x3D; box.left + (self.pageXOffset || docElem.scrollLeft) - clientLeft; return &#123; left: left, top: top, right: left + box.width, bottom: top + box.height &#125;; &#125; &#125;; function getPosition(ctrl) &#123; var p &#x3D; suggester.getInputPositon(ctrl); document.getElementById(&#39;show&#39;).style.left &#x3D; p.left + &quot;px&quot;; document.getElementById(&#39;show&#39;).style.top &#x3D; p.bottom + &quot;px&quot;; &#125; &lt;&#x2F;script&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript &quot;&gt; function show(elem) &#123; var p &#x3D; suggester.getInputPositon(elem); var s &#x3D; document.getElementById(&#39;show&#39;); s.style.top &#x3D; p.bottom + &#39;px&#39;; s.style.left &#x3D; p.left + &#39;px&#39;; s.style.display &#x3D; &#39;inherit&#39;; &#125; &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; POSMAN從Chrome複制curl 從chrome開發者工具選擇netword，選擇copy的request,滑鼠右鍵選擇copy/copy as cURL(bash) 開啟postman，從上方import，後選擇Paste Raw Text 上述完成後，執行import，會出現「error while importing curl typeerror invalid format for curl.」，這是因為postman不支援--compressed語法，刪除後再執行就解決了 https://github.com/postmanlabs/postman-app-support/issues/5735 目錄匯出檔案 透過簡單dos指令 1dir &#x2F;b &#x2F;s *.* &gt; file_list.xls 將資料夾底下的全部檔案列表出來，並儲存成 Excel 檔案 使用黑大C#程式 【潛盾機】將檔案結構匯成Excel文件 使用「DirPrintOK 」 DirPrintOK 匯出目錄下的資料夾、檔案名稱也可以很簡單 如果是使用WIN10先全選，再使用「複製路徑」 如果有使用Chrome直接將資料匣拖洩到Chrome","categories":[{"name":"工具","slug":"工具","permalink":"https://justinchang.ddns.net/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"開發","slug":"開發","permalink":"https://justinchang.ddns.net/tags/%E9%96%8B%E7%99%BC/"},{"name":"線上","slug":"線上","permalink":"https://justinchang.ddns.net/tags/%E7%B7%9A%E4%B8%8A/"},{"name":"小工具","slug":"小工具","permalink":"https://justinchang.ddns.net/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"使用Session實作Login","permalink":"https://justinchang.ddns.net/2021/03/25/%E4%BD%BF%E7%94%A8Session%E5%AF%A6%E4%BD%9CLogin/","text":"使用Session實作Login啟動session要在 ASP.NET Core 啟用 session 只需在 Startup.cs 兩個步驟： 在ConfigureServices加上session服務 12345public void ConfigureServices(IServiceCollection services)&#123; ... services.AddSession(); //加上session服務&#125; 在Configure加上Middoware 123456789101112131415public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#123; .... app.UseAuthorization(); app.UseSession(); //加上Middoware app.UseEndpoints(endpoints =&gt; &#123; endpoints.MapControllerRoute( name: &quot;default&quot;, pattern: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;); &#125;);&#125; 存取Session，在HomeController的Privacy加上存取 session 語法, 12345678public IActionResult Privacy()&#123; var us = HttpContext.Session.GetString(&quot;User&quot;); var pd = HttpContext.Session.GetString(&quot;Password&quot;); HttpContext.Session.SetString(&quot;User&quot;, &quot;Demo&quot;); HttpContext.Session.SetString(&quot;Password&quot;, &quot;123&quot;); return View();&#125; 完成上面的步驟，來測試一下應該不難發現在開啟Privacy時，Cookies出現了 .AspNetCore.Session，Value則是一長串，明明是使用Session為什麼會出現Cooke呢？這是因為HTTP是無狀態,為了辦認出是誰來請求，所以必需將SessionId回傳到後端，而 .AspNetCore.Session就是SessionId， 接下來用Debug來觀察Session的存取在第一次進入Privacy時 Get Session 是 null,第二次進入時 Get Session 就會取得上一次存入的值 Session的安全設定基於資安考量必須對session的權限作限縮，詳細的說明請參閱SessionOptions 類別 不用使用預設的 cookie Name session存活時間，預設值是 20 分鐘 限制session取出的時間，預設值是1分鐘 限制第三方讀取Cookie 12345678910public void ConfigureServices(IServiceCollection services)&#123; services.AddControllersWithViews(); services.AddSession(options=&gt;&#123; options.Cookie.Name = &quot;WithSessionId&quot;; //設定Cookie的Name名稱 options.Cookie.SecurePolicy = CookieSecurePolicy.Always; //只允許HTTPS讀取Cookie options.Cookie.SameSite = SameSiteMode.Lax; //限制第三方Cookie使用 options.IdleTimeout = TimeSpan.FromSeconds(10); //設定Session有效時間 &#125;);&#125; 重新啟動後，再次查看一下開發者工具，就會發現Cookie的Key改變為「WithSessionId」 再來測試一下經過10秒後，讀取Session的情況 實作登入與登出Action 新增登入用ViewModel規避常用的帳號密碼關鍵字，因為現在資安的議題被大家所重視，所以大部份的公司都會使用源碼檢測工具來產生報告，會從程式的特徵來判讀是否有資安疑慮，但問題來了大部的的檢測工具會把Id、User、Password等，經常用來作權限管理的關鍵字抓出在報告中呈現(通常是中風險)，雖然檢測工具的用意是用來提醒開發人員必需要特別留意或必需加強管理就可以排外，但往往「沒有人」可以負責放行，因為一但決定放行，將來被究責時會背上一鍋，所以在設計當初迴避就是最簡單的方式，也可以用一些公司自定義的縮寫也是一個不錯的選擇。 123456789101112131415161718public class LoginModel&#123; /// &lt;summary&gt; /// 識別ID(不使用User、Name、ID等，減少被弱掃或攻擊到的機會) /// &lt;/summary&gt; [Required] [StringLength(30,ErrorMessage =&quot;長度不符合規定&quot;,MinimumLength =3)] [Display(Name =&quot;帳號&quot;)] public string Badge &#123; get; set; &#125; /// &lt;summary&gt; /// 密碼(不使用Password，減少被弱掃或攻擊到的機會) /// &lt;/summary&gt; [Required] [StringLength(30, ErrorMessage = &quot;長度不符合規定&quot;, MinimumLength = 10)] [DataType(DataType.Password)] [Display(Name =&quot;密碼&quot;)] public string CipherCode &#123; get; set; &#125;&#125; 透過ViewModel產生畫面 實作登錄Action 目前並未有實作帳號儲存的方式，所以先HardCode一組帳號作為帳密驗證,真實的世界必須要將帳號存入資料庫中，並且密碼最少一種加密的方式，不可在存入未加密的字串。 在登入後還會去取得授權(可以操作系統的Function或功能)，在登入也會將此角色、授權及使用者相關系資訊存入session中，提供給系統作為授權的判斷。 最後登出只要呼叫 HttpContext.Session.Clear()就以清空這一組sessionId所存的資料。 12345678910111213141516public IActionResult Login(LoginModel login)&#123; if(login.Badge==&quot;Justin&quot; &amp;&amp; login.CipherCode == &quot;1234567890&quot;) &#123; //當登入成功後，將使用者資訊存入Session中 HttpContext.Session.SetString(&quot;User&quot;, login.Badge); HttpContext.Session.SetString(&quot;Role&quot;, &quot;administraotr&quot;); return RedirectToAction(nameof(HomeController.Index), &quot;Home&quot;); &#125; return View(nameof(AccountController.Index), login);&#125;public IActionResult Logout()&#123; HttpContext.Session.Clear(); return RedirectToAction(nameof(HomeController.Index), &quot;Home&quot;);&#125; 重構session存取, 使用擴充方式session在存取只能一個key取出一個value，相反也是一樣，只有清空可以用一個指令完成，而在系統大量操作session時這就會顯的非常麻煩, 所以可以針對Session擴允的個方法，來操作一整個物件的存入與取得值在 建立UserInfo 12345public class UserInfo&#123; public string Name &#123; get; set; &#125; public string Role &#123; get; set; &#125;&#125; 建立SessionExtenstion 1234567891011121314public static class SessionExtension&#123; const string KEY= &quot;SESSION&quot;; public static void Set&lt;T&gt;(this ISession session,T Data) &#123; session.SetString(KEY, JsonSerializer.Serialize(Data)); &#125; public static T Get&lt;T&gt;(this ISession session)where T:new () &#123; var data = session.GetString(KEY); return data!=null?JsonSerializer.Deserialize&lt;T&gt;(data):new T(); &#125;&#125; 調整Account中存取Session的方式 存入 12345HttpContext.Session.Set(new UserInfo()&#123; Name = login.Badge, Role = &quot;administraotr&quot;&#125;); 讀取 1var userinfo = HttpContext.Session.Get&lt;UserInfo&gt;(); 客制化授權由於原生的Authorize不支援session，所以可以簡單寫一個客制的授權方式，只判斷是是否已登入，否則跳回首頁 SessionAuthorizeAttribute 12345[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]public class SessionAuthorizeAttribute:Attribute&#123;&#125; SessionAuthorizeMiddleware這邊主要知道的是怎麼取得Meadata(也就是Attribute),與怎麼判斷有掛上所定義的,再者是Response怎麼回應，最後是每個await _next(content) 之後都必須return; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class SessionAuthorizeMiddleware&#123; private readonly RequestDelegate _next; private string _message; public SessionAuthorizeMiddleware(RequestDelegate next) &#123; _next = next; &#125; public async Task Invoke(HttpContext context) &#123; //1. 取得有所有的Meatdata var metaData = context.GetEndpoint().Metadata; //2. 是否有使用SessionAuthorizeAttribute var hasSessionAuthorizeAttribute = metaData.Any(x =&gt; x.ToString().EndsWith(nameof(SessionAuthorizeAttribute))); //3. 沒使用不判斷 if (!hasSessionAuthorizeAttribute) &#123; await _next(context); return; &#125; //4. 判斷權角色是否是管理者 var userInfo = context.Session.Get&lt;UserInfo&gt;(); if (userInfo != null &amp;&amp; userInfo.Role == &quot;administrator&quot;) &#123; await _next(context); return; &#125; //5. 如果未登入，則回應403 if (userInfo?.Name == null) &#123; context.Response.StatusCode = (int)HttpStatusCode.Forbidden; _message = &quot;&#123;\\&quot;code\\&quot;:403,\\&quot;message\\&quot;:\\&quot;無訪問權限 Forbidden\\&quot;&#125;&quot;; context.Response.ContentType = &quot;application/json&quot;; await context.Response.Body.WriteAsync(Encoding.UTF8.GetBytes(_message), 0, Encoding.UTF8.GetBytes(_message).Length); return; &#125; //6. 如果未被授權，則回應401 context.Response.StatusCode = (int)HttpStatusCode.Unauthorized; _message = &quot;&#123;\\&quot;code\\&quot;:401,\\&quot;message\\&quot;:\\&quot;需要授權 Forbidden\\&quot;&#125;&quot;; context.Response.ContentType = &quot;application/json&quot;; await context.Response.Body.WriteAsync(Encoding.UTF8.GetBytes(_message), 0, Encoding.UTF8.GetBytes(_message).Length); &#125;&#125; Starup掛上SessionAuthorizeMiddleware，在 app.UseSession();之後 1app.UseMiddleware&lt;SessionAuthorizeMiddleware&gt;(); Demo我們在Privacy加上[SessionAuthrize]再進行測試 這樣就是一個簡單使用Session實作具有帳號管理的功能，不過這範例有些部份沒有完成，像是帳號的儲存、角色的設定等等。 參考：Session and state management in ASP.NET CoreCookie 的 SameSite 屬性ASP.NET Core 3中的自定義授權asp.net Core 中AuthorizationHandler 实现自定义授权","categories":[{"name":"ASP.NET Core;","slug":"ASP-NET-Core","permalink":"https://justinchang.ddns.net/categories/ASP-NET-Core/"}],"tags":[{"name":"ASP.NETCore","slug":"ASP-NETCore","permalink":"https://justinchang.ddns.net/tags/ASP-NETCore/"},{"name":"WithoutIdentityLogin","slug":"WithoutIdentityLogin","permalink":"https://justinchang.ddns.net/tags/WithoutIdentityLogin/"},{"name":"Login","slug":"Login","permalink":"https://justinchang.ddns.net/tags/Login/"},{"name":"Session","slug":"Session","permalink":"https://justinchang.ddns.net/tags/Session/"}]},{"title":"自學英文-聽力","permalink":"https://justinchang.ddns.net/2021/03/25/%E8%87%AA%E5%AD%B8%E8%8B%B1%E6%96%87-%E8%81%BD%E5%8A%9B/","text":"我自已認為我的聽力能力應該是0，所以從頭開始學習，並記錄一些在學習的過程中的一些領悟，好萬事起頭難，我在VoiceTube選擇A1程度的影片，通過聽寫並打出(或寫出)所聽到的英文，剛開始一句句開始，每一句先看字幕，並重覆聽多次，試圖聽出每一個字。 English in a Minute: Burn the Candle at Both Ends in a 的連音，可以直接聽成弱弱的「依內」 the 如果在句子中間可以聽成「的」，在句中前面聽成「立」 at 可聽成「了」 both ends 的連音可以聽成bothends但重音在ends, both ends :兩端，重音在ends Burn the candle at both ends I’ll be 連音，聽成：阿爾比","categories":[{"name":"英文學習","slug":"英文學習","permalink":"https://justinchang.ddns.net/categories/%E8%8B%B1%E6%96%87%E5%AD%B8%E7%BF%92/"}],"tags":[{"name":"English Study","slug":"English-Study","permalink":"https://justinchang.ddns.net/tags/English-Study/"},{"name":"英文","slug":"英文","permalink":"https://justinchang.ddns.net/tags/%E8%8B%B1%E6%96%87/"},{"name":"自學","slug":"自學","permalink":"https://justinchang.ddns.net/tags/%E8%87%AA%E5%AD%B8/"},{"name":"聽力","slug":"聽力","permalink":"https://justinchang.ddns.net/tags/%E8%81%BD%E5%8A%9B/"}]}],"categories":[{"name":"AJAX","slug":"AJAX","permalink":"https://justinchang.ddns.net/categories/AJAX/"},{"name":"烘培","slug":"烘培","permalink":"https://justinchang.ddns.net/categories/%E7%83%98%E5%9F%B9/"},{"name":"工具","slug":"工具","permalink":"https://justinchang.ddns.net/categories/%E5%B7%A5%E5%85%B7/"},{"name":"ASP.NET Core;","slug":"ASP-NET-Core","permalink":"https://justinchang.ddns.net/categories/ASP-NET-Core/"},{"name":"英文學習","slug":"英文學習","permalink":"https://justinchang.ddns.net/categories/%E8%8B%B1%E6%96%87%E5%AD%B8%E7%BF%92/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"https://justinchang.ddns.net/tags/AJAX/"},{"name":"ASP.NETCore","slug":"ASP-NETCore","permalink":"https://justinchang.ddns.net/tags/ASP-NETCore/"},{"name":"親子","slug":"親子","permalink":"https://justinchang.ddns.net/tags/%E8%A6%AA%E5%AD%90/"},{"name":"烘培","slug":"烘培","permalink":"https://justinchang.ddns.net/tags/%E7%83%98%E5%9F%B9/"},{"name":"手作餅乾","slug":"手作餅乾","permalink":"https://justinchang.ddns.net/tags/%E6%89%8B%E4%BD%9C%E9%A4%85%E4%B9%BE/"},{"name":"微精通","slug":"微精通","permalink":"https://justinchang.ddns.net/tags/%E5%BE%AE%E7%B2%BE%E9%80%9A/"},{"name":"人生清單","slug":"人生清單","permalink":"https://justinchang.ddns.net/tags/%E4%BA%BA%E7%94%9F%E6%B8%85%E5%96%AE/"},{"name":"開發","slug":"開發","permalink":"https://justinchang.ddns.net/tags/%E9%96%8B%E7%99%BC/"},{"name":"線上","slug":"線上","permalink":"https://justinchang.ddns.net/tags/%E7%B7%9A%E4%B8%8A/"},{"name":"小工具","slug":"小工具","permalink":"https://justinchang.ddns.net/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"WithoutIdentityLogin","slug":"WithoutIdentityLogin","permalink":"https://justinchang.ddns.net/tags/WithoutIdentityLogin/"},{"name":"Login","slug":"Login","permalink":"https://justinchang.ddns.net/tags/Login/"},{"name":"Session","slug":"Session","permalink":"https://justinchang.ddns.net/tags/Session/"},{"name":"English Study","slug":"English-Study","permalink":"https://justinchang.ddns.net/tags/English-Study/"},{"name":"英文","slug":"英文","permalink":"https://justinchang.ddns.net/tags/%E8%8B%B1%E6%96%87/"},{"name":"自學","slug":"自學","permalink":"https://justinchang.ddns.net/tags/%E8%87%AA%E5%AD%B8/"},{"name":"聽力","slug":"聽力","permalink":"https://justinchang.ddns.net/tags/%E8%81%BD%E5%8A%9B/"}]}